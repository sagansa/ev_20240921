{
    "conflicts": [
        {
            "id": "c1559ba4-a8a2-4feb-958a-e251f9e945a6",
            "currentContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\ChargerLocation;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\Checkbox;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Components\\FileUpload;\nuse Filament\\Forms\\Components\\RichEditor;\nuse Filament\\Tables\\Columns\\CheckboxColumn;\nuse App\\Filament\\Resources\\Panel\\ChargerLocationResource\\Pages;\nuse App\\Models\\CurrentCharger;\nuse App\\Models\\PowerCharger;\nuse App\\Models\\TypeCharger;\nuse App\\Tables\\Columns\\LocationOnColumn;\nuse App\\Tables\\Columns\\StatusLocationColumn;\nuse Cheesegrits\\FilamentGoogleMaps\\Columns\\MapColumn;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\Group;\nuse Filament\\Forms\\Components\\Repeater;\nuse Humaidem\\FilamentMapPicker\\Fields\\OSMMap;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Filament\\Tables\\Enums\\FiltersLayout;\nuse Filament\\Tables\\Filters\\Filter;\nuse Filament\\Tables\\Filters\\SelectFilter;\nuse Illuminate\\Routing\\Route;\n\nclass ChargerLocationResource extends Resource\n{\n    protected static ?string $model = ChargerLocation::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-map-pin';\n\n    protected static ?int $navigationSort = 3;\n\n    protected static ?string $navigationGroup = 'Apps';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.chargerLocations.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.chargerLocations.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.chargerLocations.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()\n                ->schema(static::getDetailsFormHeadSchema())\n                ->columns(2),\n\n            Section::make()->schema([\n                self::getItemsRepeater(),\n            ]),\n\n            Section::make()\n                ->schema(static::getDetailsFormBottomSchema()),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->modifyQueryUsing(function (Builder $query) {\n                if (!Auth::user()->hasRole('super_admin')) {\n                    $query->where(function ($query) {\n                        $query->where('status', 2) // verified\n                            ->orWhere(function ($query) {\n                                $query->where('status', 1) // not verified\n                                        ->where('user_id', Auth::id());\n                            });\n                    });\n                }\n            })\n            ->poll('60s')\n            ->columns([\n\n                ImageColumn::make('image')->visibility('public'),\n\n                TextColumn::make('name')\n                    ->sortable(),\n\n                TextColumn::make('provider.name')\n                    ->sortable(),\n\n                TextColumn::make('latitude'),\n\n                TextColumn::make('longitude'),\n\n                CheckboxColumn::make('parking'),\n\n                TextColumn::make('province.name')\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                TextColumn::make('city.name'),\n\n                StatusLocationColumn::make('status'),\n\n                LocationOnColumn::make('location_on'),\n\n                TextColumn::make('user.name')\n                    ->visible(fn ($record) => auth()->user()->hasRole('super_admin')), // Kondisi visibilitas,\n\n            ])\n            ->filters([\n                SelectFilter::make('provider')\n                    ->relationship('provider','name'),\n                SelectFilter::make('province')\n                    ->searchable()\n                    ->relationship('province','name'),\n                SelectFilter::make('city')\n                    ->searchable()\n                    ->relationship('city','name'),\n            ], layout: FiltersLayout::AboveContent)\n            ->actions([\n                Tables\\Actions\\EditAction::make()\n                    ->visible(fn ($record) => ($record->status === 1 && $record->user_id === Auth::id()) || Auth::user()->hasRole('super_admin')),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort(function ($query) {\n                $query->orderByRaw('RAND()');\n            });\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListChargerLocations::route('/'),\n            'create' => Pages\\CreateChargerLocation::route('/create'),\n            'view' => Pages\\ViewChargerLocation::route('/{record}'),\n            'edit' => Pages\\EditChargerLocation::route('/{record}/edit'),\n        ];\n    }\n\n    public static function getDetailsFormHeadSchema(): array\n    {\n        return [\n            Grid::make(['default' => 1])->schema([\n                FileUpload::make('image')\n                    ->rules(['image'])\n                    ->nullable()\n                    ->maxSize(1024)\n                    ->image()\n                    ->imageEditor()\n                    ->imageEditorAspectRatios([null, '16:9', '4:3', '1:1']),\n\n                TextInput::make('name')\n                    ->required()\n                    ->string(),\n\n                Select::make('provider_id')\n                    ->required()\n                    ->relationship('provider', 'name')\n                    ->searchable()\n                    ->preload()\n                    ->native(false),\n\n                OSMMap::make('location')\n                    ->label('Location')\n                    ->showMarker()\n                    ->draggable()\n                    ->extraControl([\n                        'zoomDelta'           => 1,\n                        'zoomSnap'            => 0.25,\n                        'wheelPxPerZoomLevel' => 60\n                    ])\n                    ->afterStateHydrated(function (Forms\\Get $get, Forms\\Set $set, $record) {\n                        if ($record) {\n                            $latitude = $record->latitude;\n                            $longitude = $record->longitude;\n\n                            if ($latitude && $longitude) {\n                                    $set('location', ['lat' => $latitude, 'lng' => $longitude]);\n                            }\n                        }\n                    })\n                    ->afterStateUpdated(function ($state, Forms\\Get $get, Forms\\Set $set) {\n                        $set('latitude', $state['lat']);\n                        $set('longitude', $state['lng']);\n                    })\n                    // tiles url (refer to https://www.spatialbias.com/2018/02/qgis-3.0-xyz-tile-layers/)\n                    ->tilesUrl('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}'\n                ),\n\n                Group::make()\n                    ->schema([\n                        TextInput::make('latitude')\n                            ->required()\n                            ->readOnly()\n                            ->numeric(),\n                        TextInput::make('longitude')\n                            ->required()\n                            ->readOnly()\n                            ->numeric(),\n                    ])->columns(2),\n\n                Checkbox::make('parking')\n                    ->rules(['boolean'])\n                    ->inline(),\n\n                TextInput::make('address')\n                    ->nullable()\n                    ->string(),\n\n                Select::make('province_id')\n                    ->required()\n                    ->relationship('province', 'name')\n                    ->searchable()\n                    ->preload()\n                    ->native(false)\n                    ->reactive()\n                    ->afterStateUpdated(function ($state, callable $set) {\n                        $set('city_id', null);\n                        $set('district_id', null);\n                        $set('subdistrict_id', null);\n                        $set('postal_code_id', null);\n                    }),\n\n                Select::make('city_id')\n                    ->required()\n                    ->relationship('city', 'name')\n                    ->searchable()\n                    ->preload()\n                    ->native(false)\n                    ->reactive()\n                    ->options(function (callable $get) {\n                        $provinceId = $get('province_id');\n                        return \\App\\Models\\City::where('province_id', $provinceId)->pluck('name', 'id');\n                    })\n                    ->afterStateUpdated(function ($state, callable $set) {\n                        $set('district_id', null);\n                        $set('subdistrict_id', null);\n                        $set('postal_code_id', null);\n                    }),\n\n                Select::make('district_id')\n                    ->nullable()\n                    ->relationship('district', 'name')\n                    ->searchable()\n                    ->preload()\n                    ->native(false)\n                    ->reactive()\n                    ->options(function (callable $get) {\n                        $cityId = $get('city_id');\n                        return \\App\\Models\\District::where('city_id', $cityId)->pluck('name', 'id');\n                    })\n                    ->afterStateUpdated(function ($state, callable $set) {\n                        $set('subdistrict_id', null);\n                        $set('postal_code_id', null);\n                    }),\n\n                Select::make('subdistrict_id')\n                    ->nullable()\n                    ->relationship('subdistrict', 'name')\n                    ->searchable()\n                    ->preload()\n                    ->native(false)\n                    ->reactive()\n                    ->options(function (callable $get) {\n                        $districtId = $get('district_id');\n                        return \\App\\Models\\Subdistrict::where('district_id', $districtId)->pluck('name', 'id');\n                    })\n                    ->afterStateUpdated(function ($state, callable $set) {\n                        $set('postal_code_id', null);\n                    }),\n\n                Select::make('postal_code_id')\n                    ->nullable()\n                    ->relationship('postalCode', 'name')\n                    ->searchable()\n                    ->preload()\n                    ->native(false)\n                    ->reactive()\n                    ->options(function (callable $get) {\n                        $provinceId = $get('province_id');\n                        $cityId = $get('city_id');\n                        $districtId = $get('district_id');\n                        $subdistrictId = $get('subdistrict_id');\n                        return \\App\\Models\\PostalCode::where('province_id', $provinceId)\n                            ->where('city_id', $cityId)\n                            ->where('district_id', $districtId)\n                            ->where('subdistrict_id', $subdistrictId)\n                            ->pluck('name', 'id');\n                    }),\n\n                Select::make('status')\n                    ->required()\n                    ->default(1)\n                    ->searchable()\n                    ->preload()\n                    ->native(false)\n                    ->visible(fn () => Auth::user()->hasRole('super_admin'))\n                    ->options([\n                        '1' => 'not verified',\n                        '2' => 'verified',\n                        '3' => 'closed',\n                    ]),\n\n                Select::make('location_on')\n                    ->required()\n                    ->default('1')\n                    ->searchable()\n                    ->preload()\n                    ->native(false)\n                    ->options([\n                        '1' => 'public',\n                        '2' => 'private',\n                        '3' => 'dealer',\n                        '4' => 'closed',\n                    ]),\n            ]),\n        ];\n    }\n\n    public static function getItemsRepeater(): Repeater\n    {\n        return Repeater::make('chargers')\n            ->relationship()\n            ->minItems(1)\n            ->schema([\n                Select::make('current_charger_id')\n                    ->label('Current ')\n                    ->options(CurrentCharger::query()->pluck('name', 'id'))\n                    ->required()\n                    ->reactive()\n                    ->columnSpan([\n                        'md' => 4,\n                    ])\n                    ->searchable()\n                    ->afterStateUpdated(function ($state, callable $set) {\n                        $set('type_charger_id', null);\n                        $set('power_charger_id', null);\n                        $set('unit', null); // Reset the unit field to its default value or any other desired initial state\n                    }),\n\n                Select::make('type_charger_id')\n                    ->label('Type')\n                    ->options(function (callable $get) {\n                        $currentChargerId = $get('current_charger_id');\n                        return TypeCharger::where('current_charger_id', $currentChargerId)->pluck('name', 'id')->toArray();\n                    })\n                    ->required()\n                    ->reactive()\n                    ->distinct()\n                    ->disableOptionsWhenSelectedInSiblingRepeaterItems()\n                    ->afterStateUpdated(function ($state, callable $set) {\n                        $set('power_charger_id', null);\n                        $set('unit', 1); // Reset the unit field to its default value or any other desired initial state\n                    })\n                    ->columnSpan([\n                        'md' => 4,\n                    ])\n                    ->searchable(),\n\n                Select::make('power_charger_id')\n                    ->label('Power')\n                    ->options(function (callable $get) {\n                        $typeChargerId = $get('type_charger_id');\n                        return PowerCharger::where('type_charger_id', $typeChargerId)->pluck('name', 'id')->toArray();\n                    })\n                    ->required()\n                    ->reactive()\n                    ->distinct()\n                    ->disableOptionsWhenSelectedInSiblingRepeaterItems()\n                    ->columnSpan([\n                        'md' => 4,\n                    ])\n                    ->searchable(),\n\n                TextInput::make('unit')\n                    ->integer()\n                    ->default(1)\n                    ->minValue(1)\n                    ->required()\n                    ->columnSpan([\n                        'md' => 2,\n                    ]),\n            ])\n            ->columns([\n                'md' => 14,\n            ])\n            ->defaultItems(1);\n    }\n\n    public static function getDetailsFormBottomSchema(): array\n    {\n        return [\n            RichEditor::make('description')\n                    ->nullable()\n                    ->string()\n                    ->fileAttachmentsVisibility('public'),\n        ];\n    }\n}\n",
            "newContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\ChargerLocation;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\Checkbox;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\FileUpload;\nuse Filament\\Forms\\Components\\RichEditor;\nuse Filament\\Tables\\Columns\\CheckboxColumn;\nuse Illuminate\\Database\\Eloquent\\SoftDeletingScope;\nuse App\\Filament\\Resources\\Panel\\ChargerLocationResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\ChargerLocationResource\\RelationManagers;\n\nclass ChargerLocationResource extends Resource\n{\n    protected static ?string $model = ChargerLocation::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 3;\n\n    protected static ?string $navigationGroup = 'Apps';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.chargerLocations.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.chargerLocations.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.chargerLocations.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    FileUpload::make('image')\n                        ->rules(['image'])\n                        ->nullable()\n                        ->maxSize(1024)\n                        ->image()\n                        ->imageEditor()\n                        ->imageEditorAspectRatios([null, '16:9', '4:3', '1:1']),\n\n                    TextInput::make('name')\n                        ->required()\n                        ->string(),\n\n                    Select::make('provider_id')\n                        ->required()\n                        ->relationship('provider', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    TextInput::make('latitude')\n                        ->nullable()\n                        ->numeric()\n                        ->step(1),\n\n                    TextInput::make('longitude')\n                        ->nullable()\n                        ->numeric()\n                        ->step(1),\n\n                    Checkbox::make('parking')\n                        ->rules(['boolean'])\n                        ->required()\n                        ->inline(),\n\n                    TextInput::make('address')\n                        ->nullable()\n                        ->string(),\n\n                    Select::make('province_id')\n                        ->required()\n                        ->relationship('province', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('city_id')\n                        ->required()\n                        ->relationship('city', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('district_id')\n                        ->nullable()\n                        ->relationship('district', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('subdistrict_id')\n                        ->nullable()\n                        ->relationship('subdistrict', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('postal_code_id')\n                        ->nullable()\n                        ->relationship('postalCode', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('status')\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false)\n                        ->options([\n                            '1' => 'not verified',\n                            '2' => 'verified',\n                            '3' => 'closed',\n                        ]),\n\n                    Select::make('location_on')\n                        ->required()\n                        ->default('1')\n                        ->searchable()\n                        ->preload()\n                        ->native(false)\n                        ->options([\n                            '1' => 'public',\n                            '2' => 'private',\n                            '3' => 'dealer',\n                            '4' => 'closed',\n                        ]),\n\n                    RichEditor::make('description')\n                        ->nullable()\n                        ->string()\n                        ->fileAttachmentsVisibility('public'),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                ImageColumn::make('image')->visibility('public'),\n\n                TextColumn::make('name'),\n\n                TextColumn::make('provider.name'),\n\n                TextColumn::make('latitude'),\n\n                TextColumn::make('longitude'),\n\n                CheckboxColumn::make('parking'),\n\n                TextColumn::make('address'),\n\n                TextColumn::make('province.name'),\n\n                TextColumn::make('city.name'),\n\n                TextColumn::make('status'),\n\n                TextColumn::make('location_on'),\n\n                TextColumn::make('user.name'),\n            ])\n            ->filters([Tables\\Filters\\TrashedFilter::make()])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n\n                    Tables\\Actions\\ForceDeleteBulkAction::make(),\n                    Tables\\Actions\\RestoreBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListChargerLocations::route('/'),\n            'create' => Pages\\CreateChargerLocation::route('/create'),\n            'view' => Pages\\ViewChargerLocation::route('/{record}'),\n            'edit' => Pages\\EditChargerLocation::route('/{record}/edit'),\n        ];\n    }\n\n    public static function getEloquentQuery(): Builder\n    {\n        return parent::getEloquentQuery()->withoutGlobalScopes([\n            SoftDeletingScope::class,\n        ]);\n    }\n}\n"
        }
    ]
}