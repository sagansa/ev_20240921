{
    "conflicts": [
        {
            "id": "a772a255-591d-40cc-8beb-5c57bdce450b",
            "currentContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Tables;\nuse App\\Models\\Charge;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Forms\\Components\\FileUpload;\nuse App\\Filament\\Resources\\Panel\\ChargeResource\\Pages;\nuse App\\Models\\Charger;\nuse App\\Models\\Vehicle;\nuse Filament\\Forms\\Components\\Toggle;\nuse Filament\\Support\\RawJs;\nuse Filament\\Tables\\Columns\\Summarizers\\Sum;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Filament\\Tables\\Filters\\Filter;\nuse Filament\\Tables\\Filters\\SelectFilter;\nuse Filament\\Tables\\Columns\\ToggleColumn;\nuse App\\Filament\\Widgets\\ChargeResource\\ChargeStats;\n\nclass ChargeResource extends Resource\n{\n    protected static ?string $model = Charge::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-bolt';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Apps';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.charges.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.charges.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.charges.collectionTitle');\n    }\n\n    public static function getWidgets(): array\n    {\n        return [\n            ChargeStats::class,\n        ];\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make('Start Charging')->schema([\n                Grid::make(['default' => 1])->schema([\n                    FileUpload::make('image')\n                        ->rules(['image'])\n                        ->nullable()\n                        ->maxSize(1024)\n                        ->image()\n                        ->imageEditor()\n                        ->imageEditorAspectRatios([null, '16:9', '4:3', '1:1']),\n\n                    Grid::make(['default' => 1])->schema([\n                        Select::make('vehicle_id')\n                            ->label('Vehicle')\n                            ->required()\n                            ->options(function () {\n                                return Vehicle::where('user_id', Auth::id())\n                                    ->where('status', 1)\n                                    ->pluck('license_plate', 'id');\n                            })\n                            ->searchable()\n                            ->preload()\n                            ->native(false)\n                            ->reactive()\n                            ->afterStateUpdated(function ($state, callable $set) {\n                                if ($state) {\n                                    $set('km_before', ChargeResource::getLatestKmNowForVehicle($state));\n                                    $set('finish_charging_before', ChargeResource::getLatestChargingNowForVehicle($state));\n                                }\n                            }),\n\n                        DatePicker::make('date')\n                            ->rules(['date'])\n                            ->default(today())\n                            ->required()\n                            ->native(false),\n\n                        Select::make('charger_location_id')\n                            ->label('Location')\n                            ->required()\n                            ->relationship('chargerLocation', 'name')\n                            ->searchable()\n                            ->preload()\n                            ->native(false)\n                            ->afterStateUpdated(function ($state, callable $set) {\n                                $set('charger_id', null);\n                            }),\n\n                        Select::make('charger_id')\n                            ->label('Charger')\n                            ->reactive()\n                            ->options(function (callable $get) {\n                                $chargerLocationId = $get('charger_location_id');\n                                return Charger::all()->where('charger_location_id', $chargerLocationId)->pluck('charger_name', 'id')->toArray();\n                            })\n                            ->required()\n                            ->searchable()\n                            ->preload()\n                            ->native(false),\n\n                        TextInput::make('km_now')\n                            ->label('km start charging')\n                            ->mask(RawJs::make('$money($input)'))\n                            ->required()\n                            ->minValue(0)\n                            ->numeric()\n                            ->suffix('km')\n                            ->afterStateUpdated(function ($state, callable $set) {\n                                $set('km_now', preg_replace('/[^\\d\\.]/', '', $state));\n                            }),\n\n                        TextInput::make('start_charging_now')\n                            ->label('Percentage battery start')\n                            ->required()\n                            ->minValue(0)\n                            ->numeric()\n                            ->suffix('%'),\n\n\n                    ])\n                    ->columns(3)\n                ]),\n            ]),\n\n            Toggle::make('is_finish_charging')\n                ->label('Is the charging finish?')\n                ->default(false)\n                ->reactive()\n                ->afterStateUpdated(function ($state, callable $set) {\n                    $set('finish_charging_section', $state);\n                }),\n\n            Section::make('Finish Charging')\n                ->visible(fn ($get) => $get('is_finish_charging'))\n                ->schema([\n                    Grid::make(['default' => 1])->schema([\n                        TextInput::make('finish_charging_now')\n                            ->label('Percentage battery finish')\n                            ->requiredWith('is_finish_charging')\n                            ->minValue(0)\n                            ->numeric()\n                            ->maxValue(100)\n                            ->suffix('%'),\n\n                        TextInput::make('parking')\n                            ->requiredWith('is_finish_charging')\n                            // ->mask(RawJs::make('$money($input)'))\n                            ->default(0)\n                            ->minValue(0)\n                            ->numeric()\n                            ->prefix('Rp'),\n\n                        Toggle::make('is_kwh_measured')\n                            ->label('Is kWh measured?')\n                            ->default(false),\n\n                        TextInput::make('kWh')\n                            ->label('kWh')\n                            ->requiredWith('is_finish_charging')\n                            ->minValue(0)\n                            ->numeric()\n                            ->reactive()\n                            ->suffix('kWh'),\n\n                        TextInput::make('street_lighting_tax')\n                            ->label('PPJ')\n                            ->requiredWith('is_finish_charging')\n                            // ->mask(RawJs::make('$money($input)'))\n                            ->default(0)\n                            ->minValue(0)\n                            ->numeric()\n                            ->prefix('Rp'),\n\n                        TextInput::make('value_added_tax')\n                            ->label('VAT')\n                            ->requiredWith('is_finish_charging')\n                            // ->mask(RawJs::make('$money($input)'))\n                            ->default(0)\n                            ->minValue(0)\n                            ->numeric()\n                            ->prefix('Rp'),\n\n                        TextInput::make('admin_cost')\n                            ->requiredWith('is_finish_charging')\n                            // ->mask(RawJs::make('$money($input)'))\n                            ->default(0)\n                            ->minValue(0)\n                            ->numeric()\n                            ->prefix('Rp'),\n\n                        TextInput::make('total_cost')\n                            ->requiredWith('is_finish_charging')\n                            // ->mask(RawJs::make('$money($input)'))\n                            ->default(0)\n                            ->minValue(0)\n                            ->numeric()\n                            ->prefix('Rp'),\n                    ])\n                    ->columns(3),\n                ]),\n            ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->modifyQueryUsing(function (Builder $query) {\n                $is_super_admin = Auth::user()->hasRole('super_admin');\n\n                if (!$is_super_admin) {\n                    $query->where('user_id', Auth::user()->id);\n                }\n            })\n            ->poll('60s')\n            ->columns([\n\n                ImageColumn::make('image')->visibility('public'),\n\n                TextColumn::make('vehicle.license_plate'),\n\n                TextColumn::make('date')\n                    ->sortable()\n                    ->date(),\n\n                TextColumn::make('chargerLocation.name')\n                    ->label('Location')\n                    ->searchable()\n                    ->sortable(),\n\n                TextColumn::make('chargerLocation.provider.name')\n                    ->label('Provider')\n                    ->sortable(),\n\n                TextColumn::make('charger.charger_name'),\n\n                TextColumn::make('km_now')\n                    ->label('km now')\n                    ->numeric(\n                        thousandsSeparator: '.'\n                    )\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                TextColumn::make('km_before')\n                    ->label('km before')\n                    ->visible(fn ($record) => auth()->user()->hasRole('super_admin'))\n                    ->numeric(\n                        thousandsSeparator: '.'\n                    )\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                TextColumn::make('start_charging_now')\n                    ->suffix('%')\n                    ->toggleable(isToggledHiddenByDefault: true),\n                    // ->summarize(Sum::make()),\n\n                TextColumn::make('finish_charging_now')\n                    ->suffix('%')\n                    ->toggleable(isToggledHiddenByDefault: true),\n                    // ->summarize(Sum::make()),\n\n                TextColumn::make('finish_charging_before')\n                    ->visible(fn ($record) => auth()->user()->hasRole('super_admin'))->suffix('%')\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                TextColumn::make('parking')\n                    ->numeric(\n                        thousandsSeparator: '.'\n                    )\n                    ->prefix('Rp ')\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                ToggleColumn::make('is_kwh_measured')\n                    ->label('kWh measured')\n                    ->toggleable(isToggledHiddenByDefault: false),\n\n                TextColumn::make('kWh')\n                    ->label('kWh')\n                    ->sortable()\n                    ->numeric(\n                        decimalPlaces: 2,\n                        thousandsSeparator: '.',\n                        decimalSeparator: ',',\n                        )\n                    ->toggleable(isToggledHiddenByDefault: true)\n                    ->summarize(Sum::make()\n                        ->label('')\n                        ->numeric(\n                            decimalPlaces: 2,\n                            thousandsSeparator: '.',\n                            decimalSeparator: ',',\n                            )\n                        ->suffix(' kWh')),\n\n                TextColumn::make('street_lighting_tax')\n                    ->label('PPJ')\n                    ->numeric(\n                        thousandsSeparator: '.'\n                    )\n                    ->prefix('Rp ')\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                TextColumn::make('value_added_tax')\n                    ->label('PPN')\n                    ->numeric(\n                        thousandsSeparator: '.'\n                    )\n                    ->prefix('Rp ')\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                TextColumn::make('admin_cost')\n                    ->numeric(\n                        thousandsSeparator: '.'\n                    )\n                    ->prefix('Rp ')\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                TextColumn::make('total_cost')\n                    ->sortable()\n                    ->numeric(\n                        thousandsSeparator: '.'\n                    )\n                    ->prefix('Rp ')\n                    ->toggleable(isToggledHiddenByDefault: true)\n                    ->summarize(Sum::make()\n                        ->numeric(\n                            thousandsSeparator: '.'\n                        )\n                        ->label('')\n                        ->prefix('Rp ')),\n\n                TextColumn::make('losses')\n                    ->suffix('%')\n                    ->numeric(decimalPlaces: 2)\n                    ->getStateUsing(function ($record) {\n                        $batteryCapacity = $record->vehicle->typeVehicle->battery_capacity;\n                        $startCharge = $record->start_charging_now;\n                        $finishCharge = $record->finish_charging_now;\n                        $kWh = $record->kWh;\n                        $isKwhMeasured = $record->is_kwh_measured; // Add this line\n\n                        if (!$isKwhMeasured) {\n                            return 0; // If is_kwh_measured is false, set losses to 0\n                        }\n                        $chargeBatteryCapacity = ($finishCharge - $startCharge) * ($batteryCapacity/100);\n                        $losses = $chargeBatteryCapacity > 0 ? (($kWh / $chargeBatteryCapacity) - 1) * 100 : 0;\n                        return $losses;\n                    }),\n\n                TextColumn::make('Consumption')\n                    ->suffix('km/kWh')\n                    ->numeric(decimalPlaces: 2)\n                    ->getStateUsing(function ($record) {\n                        $finishChargingBefore = $record->finish_charging_before;\n                        $startChargingNow = $record->start_charging_now;\n                        $usedBattery = $finishChargingBefore - $startChargingNow;\n\n                        $batteryCapacity = $record->vehicle->typeVehicle->battery_capacity;\n\n                        $usedkWh = $usedBattery * $batteryCapacity;\n\n                        $kmNow = $record->km_now;\n                        $kmBefore = $record->km_before;\n                        $miliage = $kmNow - $kmBefore;\n\n                        $consumption = $usedkWh > 0 ? $miliage / $usedkWh * 100 : 0;\n                        return $consumption;\n                    }),\n\n                TextColumn::make('cost_per_kwh')\n                    ->label('Rp / kWh')\n                    ->getStateUsing(function ($record) {\n                        return $record->kWh > 0 ? $record->total_cost / $record->kWh : 0;\n                    })\n                    ->numeric(thousandsSeparator: '.')\n                    ->prefix('Rp ')\n                    ->suffix(' /kWh'),\n\n                TextColumn::make('user.name')\n                    ->visible(fn ($record) => auth()->user()->hasRole('super_admin')), // Kondisi visibilitas,\n            ])\n            ->filters([\n                    SelectFilter::make('vehicle')\n                        ->relationship('vehicle','license_plate'),\n                    SelectFilter::make('current_charger')\n                        ->relationship('charger.currentCharger', 'name')\n                        ->label('Current'),\n                    SelectFilter::make('provider')\n                        ->relationship('chargerLocation.provider', 'name')\n                        ->label('Provider'),\n                    SelectFilter::make('charger_location_id')\n                        ->searchable()\n                        ->label('Location')\n                        ->relationship('chargerLocation', 'name'),\n                    SelectFilter::make('is_kwh_measured')\n                        ->label('kWh Measured')\n                        ->options([\n                            '1' => 'is measured',\n                            '0' => 'No',\n                        ]),\n                    Filter::make('Date')\n                        ->form([\n                            DatePicker::make('date_from'),\n                            DatePicker::make('date_until'),\n                        ])\n                        ->query(function (Builder $query, array $data): Builder {\n                            return $query\n                                ->when(\n                                    $data['date_from'],\n                                    fn (Builder $query, $date): Builder => $query->whereDate('date', '>=', $date),\n                                )\n                                ->when(\n                                    $data['date_until'],\n                                    fn (Builder $query, $date): Builder => $query->whereDate('date', '<=', $date),\n                                );\n                        })\n\n                    ],\n                    // layout: FiltersLayout::AboveContent\n                )\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                // Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('date', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListCharges::route('/'),\n            'create' => Pages\\CreateCharge::route('/create'),\n            'view' => Pages\\ViewCharge::route('/{record}'),\n            'edit' => Pages\\EditCharge::route('/{record}/edit'),\n        ];\n    }\n\n    public static function getLatestKmNowForVehicle($vehicleId)\n    {\n        $latestKm = Charge::where('vehicle_id', $vehicleId)\n            ->latest('date')\n            ->first();\n\n        return $latestKm ? $latestKm->km_now : 0;\n    }\n\n    public static function getLatestChargingNowForVehicle($vehicleId)\n    {\n        $latestCharge = Charge::where('vehicle_id', $vehicleId)\n            ->latest('date')\n            ->first();\n\n        return $latestCharge ? $latestCharge->finish_charging_now : 0;\n    }\n}\n",
            "newContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse App\\Models\\Charge;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Forms\\Components\\FileUpload;\nuse Illuminate\\Database\\Eloquent\\SoftDeletingScope;\nuse App\\Filament\\Resources\\Panel\\ChargeResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\ChargeResource\\RelationManagers;\n\nclass ChargeResource extends Resource\n{\n    protected static ?string $model = Charge::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Apps';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.charges.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.charges.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.charges.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    FileUpload::make('image')\n                        ->rules(['image'])\n                        ->nullable()\n                        ->maxSize(1024)\n                        ->image()\n                        ->imageEditor()\n                        ->imageEditorAspectRatios([null, '16:9', '4:3', '1:1']),\n\n                    Select::make('vehicle_id')\n                        ->required()\n                        ->relationship('vehicle', 'id')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    DatePicker::make('date')\n                        ->rules(['date'])\n                        ->required()\n                        ->native(false),\n\n                    Select::make('charger_location_id')\n                        ->required()\n                        ->relationship('chargerLocation', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('charger_id')\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    TextInput::make('km_now')\n                        ->required()\n                        ->numeric()\n                        ->step()\n                        ->suffix('km'),\n\n                    TextInput::make('km_before')\n                        ->required()\n                        ->numeric()\n                        ->step(1)\n                        ->suffix('km'),\n\n                    TextInput::make('start_charging_now')\n                        ->required()\n                        ->numeric()\n                        ->step(1)\n                        ->suffix('%'),\n\n                    TextInput::make('finish_charging_now')\n                        ->required()\n                        ->numeric()\n                        ->step(1)\n                        ->suffix('%'),\n\n                    TextInput::make('finish_charging_before')\n                        ->required()\n                        ->numeric()\n                        ->step(1)\n                        ->suffix('%'),\n\n                    TextInput::make('parking')\n                        ->required()\n                        ->numeric()\n                        ->step(1)\n                        ->prefix('Rp'),\n\n                    TextInput::make('kWh')\n                        ->required()\n                        ->numeric()\n                        ->step(1)\n                        ->suffix('kWh'),\n\n                    TextInput::make('street_lighting_tax')\n                        ->required()\n                        ->numeric()\n                        ->step(1)\n                        ->prefix('Rp'),\n\n                    TextInput::make('value_added_tax')\n                        ->required()\n                        ->numeric()\n                        ->step(1)\n                        ->prefix('Rp'),\n\n                    TextInput::make('admin_cost')\n                        ->required()\n                        ->numeric()\n                        ->step(1)\n                        ->prefix('Rp'),\n\n                    TextInput::make('total_cost')\n                        ->required()\n                        ->numeric()\n                        ->step(1)\n                        ->prefix('Rp'),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                ImageColumn::make('image')->visibility('public'),\n\n                TextColumn::make('vehicle.id'),\n\n                TextColumn::make('date')->since(),\n\n                TextColumn::make('chargerLocation.name'),\n\n                TextColumn::make('charger_id'),\n\n                TextColumn::make('km_now')->numeric(thousandsSeparator: '.'),\n\n                TextColumn::make('km_before'),\n\n                TextColumn::make('start_charging_now'),\n\n                TextColumn::make('finish_charging_now'),\n\n                TextColumn::make('finish_charging_before'),\n\n                TextColumn::make('parking')->numeric(thousandsSeparator: '.'),\n\n                TextColumn::make('kWh')->numeric(\n                    decimalPlaces: 2,\n                    decimalSeparator: ',',\n                    thousandsSeparator: '.'\n                ),\n\n                TextColumn::make('street_lighting_tax')->numeric(\n                    thousandsSeparator: '.'\n                ),\n\n                TextColumn::make('value_added_tax')->numeric(\n                    thousandsSeparator: '.'\n                ),\n\n                TextColumn::make('admin_cost')->numeric(\n                    thousandsSeparator: '.'\n                ),\n\n                TextColumn::make('total_cost')->numeric(\n                    thousandsSeparator: '.'\n                ),\n\n                TextColumn::make('user.name'),\n            ])\n            ->filters([Tables\\Filters\\TrashedFilter::make()])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n\n                    Tables\\Actions\\ForceDeleteBulkAction::make(),\n                    Tables\\Actions\\RestoreBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListCharges::route('/'),\n            'create' => Pages\\CreateCharge::route('/create'),\n            'view' => Pages\\ViewCharge::route('/{record}'),\n            'edit' => Pages\\EditCharge::route('/{record}/edit'),\n        ];\n    }\n\n    public static function getEloquentQuery(): Builder\n    {\n        return parent::getEloquentQuery()->withoutGlobalScopes([\n            SoftDeletingScope::class,\n        ]);\n    }\n}\n"
        }
    ]
}