{
    "conflicts": [
        {
            "id": "ba92d9ba-c4d5-4e52-ab33-008d5b238250",
            "currentContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse App\\Filament\\Clusters\\Providers;\nuse App\\Filament\\Forms\\ImageFileUpload;\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse App\\Models\\Provider;\nuse Filament\\Tables\\Table;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\FileUpload;\nuse App\\Filament\\Resources\\Panel\\ProviderResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\ProviderResource\\RelationManagers;\nuse App\\Tables\\Columns\\StatusActiveColumn;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass ProviderResource extends Resource\n{\n    protected static ?string $model = Provider::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-building-office';\n\n    // protected static ?string $cluster = Providers::class;\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Databases';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.providers.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.providers.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.providers.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    ImageFileUpload::make('image')\n                        ->directory('images/provider'),\n\n                    TextInput::make('name')\n                        ->required()\n                        ->string(),\n\n                    TextInput::make('contact')\n                        ->nullable()\n                        ->string(),\n\n                    TextInput::make('address')\n                        ->nullable()\n                        ->string(),\n\n                    Select::make('province_id')\n                        ->required()\n                        ->relationship('province', 'name')\n                        ->searchable()\n                        ->reactive()\n                        ->afterStateUpdated(function ($state, callable $set) {\n                            $set('city_id', null);\n                            $set('district_id', null);\n                            $set('subdistrict_id', null);\n                            $set('postal_code_id', null);\n                        }),\n\n                Select::make('city_id')\n                    ->required()\n                    ->relationship('city', 'name')\n                    ->searchable()\n                    ->reactive()\n                    ->options(function (callable $get) {\n                        $provinceId = $get('province_id');\n                        return \\App\\Models\\City::where('province_id', $provinceId)->pluck('name', 'id');\n                    })\n                    ->afterStateUpdated(function ($state, callable $set) {\n                        $set('district_id', null);\n                        $set('subdistrict_id', null);\n                        $set('postal_code_id', null);\n                    }),\n\n                Select::make('district_id')\n                    ->nullable()\n                    ->relationship('district', 'name')\n                    ->searchable()\n                    ->reactive()\n                    ->options(function (callable $get) {\n                        $cityId = $get('city_id');\n                        return \\App\\Models\\District::where('city_id', $cityId)->pluck('name', 'id');\n                    })\n                    ->afterStateUpdated(function ($state, callable $set) {\n                        $set('subdistrict_id', null);\n                        $set('postal_code_id', null);\n                    }),\n\n                Select::make('subdistrict_id')\n                    ->nullable()\n                    ->relationship('subdistrict', 'name')\n                    ->searchable()\n                    ->reactive()\n                    ->options(function (callable $get) {\n                        $districtId = $get('district_id');\n                        return \\App\\Models\\Subdistrict::where('district_id', $districtId)->pluck('name', 'id');\n                    })\n                    ->afterStateUpdated(function ($state, callable $set) {\n                        $set('postal_code_id', null);\n                    }),\n\n                Select::make('postal_code_id')\n                    ->nullable()\n                    ->relationship('postalCode', 'name')\n                    ->searchable()\n                    ->reactive()\n                    ->options(function (callable $get) {\n                        $provinceId = $get('province_id');\n                        $cityId = $get('city_id');\n                        $districtId = $get('district_id');\n                        $subdistrictId = $get('subdistrict_id');\n                        return \\App\\Models\\PostalCode::where('province_id', $provinceId)\n                            ->where('city_id', $cityId)\n                            ->where('district_id', $districtId)\n                            ->where('subdistrict_id', $subdistrictId)\n                            ->pluck('name', 'id');\n                    }),\n\n                Select::make('status')\n                    ->required()\n                    ->searchable()\n                    ->options([\n                        '1' => 'active',\n                        '2' => 'inactive',\n                    ]),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                ImageColumn::make('image')->visibility('public'),\n\n                TextColumn::make('name')\n                    ->sortable(),\n\n                TextColumn::make('contact'),\n\n                StatusActiveColumn::make('status')\n                    ->visible(fn () => Auth::user()->hasRole('super_admin')),\n            ])\n            ->filters([])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListProviders::route('/'),\n            'create' => Pages\\CreateProvider::route('/create'),\n            'view' => Pages\\ViewProvider::route('/{record}'),\n            'edit' => Pages\\EditProvider::route('/{record}/edit'),\n        ];\n    }\n}\n",
            "newContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse App\\Models\\Provider;\nuse Filament\\Tables\\Table;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\FileUpload;\nuse App\\Filament\\Resources\\Panel\\ProviderResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\ProviderResource\\RelationManagers;\n\nclass ProviderResource extends Resource\n{\n    protected static ?string $model = Provider::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Chargers';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.providers.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.providers.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.providers.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    FileUpload::make('image')\n                        ->rules(['image'])\n                        ->nullable()\n                        ->maxSize(1024)\n                        ->image()\n                        ->imageEditor()\n                        ->imageEditorAspectRatios([null, '16:9', '4:3', '1:1']),\n\n                    TextInput::make('name')\n                        ->required()\n                        ->string(),\n\n                    TextInput::make('contact')\n                        ->nullable()\n                        ->string(),\n\n                    TextInput::make('address')\n                        ->nullable()\n                        ->string(),\n\n                    Select::make('province_id')\n                        ->nullable()\n                        ->relationship('province', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('city_id')\n                        ->nullable()\n                        ->relationship('city', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('district_id')\n                        ->nullable()\n                        ->relationship('district', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('subdistrict_id')\n                        ->nullable()\n                        ->relationship('subdistrict', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('postal_code_id')\n                        ->nullable()\n                        ->relationship('postalCode', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('status')\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false)\n                        ->options([\n                            '1' => 'active',\n                            '2' => 'inactive',\n                        ]),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                ImageColumn::make('image')->visibility('public'),\n\n                TextColumn::make('name'),\n\n                TextColumn::make('contact'),\n\n                TextColumn::make('address'),\n\n                TextColumn::make('province.name'),\n\n                TextColumn::make('city.name'),\n\n                TextColumn::make('district.name'),\n\n                TextColumn::make('subdistrict.name'),\n\n                TextColumn::make('postalCode.name'),\n\n                TextColumn::make('status'),\n            ])\n            ->filters([])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListProviders::route('/'),\n            'create' => Pages\\CreateProvider::route('/create'),\n            'view' => Pages\\ViewProvider::route('/{record}'),\n            'edit' => Pages\\EditProvider::route('/{record}/edit'),\n        ];\n    }\n}\n"
        }
    ]
}