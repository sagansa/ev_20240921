{
    "conflicts": [
        {
            "id": "933dc30c-f92a-4529-8c80-5daa71853e6e",
            "currentContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Support\\Components\\Badge;\nuse Filament\\Tables;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\TypeVehicle;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse App\\Filament\\Resources\\Panel\\TypeVehicleResource\\Pages;\nuse Filament\\Tables\\Actions\\ActionGroup;\nuse Filament\\Tables\\Columns\\Layout\\Panel;\nuse Filament\\Tables\\Enums\\FiltersLayout;\nuse Filament\\Tables\\Filters\\SelectFilter;\nuse Termwind\\Components\\Span;\n\nclass TypeVehicleResource extends Resource\n{\n    protected static ?string $model = TypeVehicle::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-globe-asia-australia';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Databases';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.typeVehicles.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.typeVehicles.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.typeVehicles.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    Select::make('model_vehicle_id')\n                        ->required()\n                        ->relationship('modelVehicle', 'name')\n                        ->searchable(),\n\n                    TextInput::make('name')\n                        ->required()\n                        ->string()\n                        ->autofocus(),\n\n                    TextInput::make('battery_capacity')\n                        ->nullable()\n                        ->numeric()\n                        ->suffix('kWh')\n                        ->inputMode('decimal'),\n\n                    Select::make('type_charger')\n                        ->required()\n                        ->multiple()\n                        ->searchable()\n                        ->options([\n                            '1' => 'CCS2',\n                            '2' => 'Chademo',\n                            '3' => 'DC GBT',\n                            '4' => 'Type 2',\n                            '5' => 'AC GBT',\n                        ]),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                TextColumn::make('modelVehicle.brandVehicle.name')\n                    ->sortable()\n                    ->label('Brand'),\n\n                TextColumn::make('modelVehicle.name')\n                    ->sortable()\n                    ->label('Model'),\n\n                TextColumn::make('name')\n                    ->label('Type'),\n\n                TextColumn::make('battery_capacity')\n                    ->sortable()\n                    ->suffix(' kWh'),\n\n                TextColumn::make('type_charger')\n                    ->label('Type Charger')\n                    ->formatStateUsing(function ($state) {\n                        $options = [\n                            '1' => 'CCS2',\n                            '2' => 'Chademo',\n                            '3' => 'DC GBT',\n                            '4' => 'Type 2',\n                            '5' => 'AC GBT',\n                        ];\n                        $values = array_map('trim', explode(',', $state));\n                        return implode(', ', array_map(function ($item) use ($options) {\n                            return $options[$item] ?? '';\n                        }, $values));\n                    }),\n\n            ])\n            ->filters([\n                SelectFilter::make('brand_vehicle')\n                    ->relationship('modelVehicle.brandVehicle','name')\n                    ->label('Brand'),\n                SelectFilter::make('model_vehicle')\n                    ->relationship('modelVehicle','name')\n                    ->label('Model'),\n            ], layout: FiltersLayout::AboveContent)\n            ->actions([\n                ActionGroup::make([\n                    Tables\\Actions\\EditAction::make(),\n                    Tables\\Actions\\ViewAction::make(),\n                ])\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort(function ($query) {\n                $query->orderByRaw('RAND()');\n            });\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListTypeVehicles::route('/'),\n            'create' => Pages\\CreateTypeVehicle::route('/create'),\n            'view' => Pages\\ViewTypeVehicle::route('/{record}'),\n            'edit' => Pages\\EditTypeVehicle::route('/{record}/edit'),\n        ];\n    }\n\n    public function panel(Panel $panel): Panel\n{\n    return $panel\n        ->plugins([\n            \\BezhanSalleh\\FilamentShield\\FilamentShieldPlugin::make()\n        ]);\n}\n}\n",
            "newContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\TypeVehicle;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse App\\Filament\\Resources\\Panel\\TypeVehicleResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\TypeVehicleResource\\RelationManagers;\n\nclass TypeVehicleResource extends Resource\n{\n    protected static ?string $model = TypeVehicle::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 2;\n\n    protected static ?string $navigationGroup = 'Vehicles';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.typeVehicles.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.typeVehicles.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.typeVehicles.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    TextInput::make('name')\n                        ->required()\n                        ->string()\n                        ->autofocus(),\n\n                    Select::make('model_vehicle_id')\n                        ->required()\n                        ->relationship('modelVehicle', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    TextInput::make('battery_capacity')\n                        ->required()\n                        ->numeric()\n                        ->step(0)\n                        ->suffix('kWh')\n                        ->inputMode('decimal'),\n\n                    Select::make('type_charger')\n                        ->required()\n                        ->multiple()\n                        ->searchable()\n                        ->preload()\n                        ->native(false)\n                        ->options([\n                            '1' => 'CCS2',\n                            '2' => 'Chademo',\n                            '3' => 'DC GBT',\n                            '4' => 'Type 2',\n                            '5' => 'AC GBT',\n                        ]),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                TextColumn::make('name'),\n\n                TextColumn::make('modelVehicle.name'),\n\n                TextColumn::make('battery_capacity'),\n\n                TextColumn::make('type_charger'),\n            ])\n            ->filters([])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListTypeVehicles::route('/'),\n            'create' => Pages\\CreateTypeVehicle::route('/create'),\n            'view' => Pages\\ViewTypeVehicle::route('/{record}'),\n            'edit' => Pages\\EditTypeVehicle::route('/{record}/edit'),\n        ];\n    }\n}\n"
        }
    ]
}